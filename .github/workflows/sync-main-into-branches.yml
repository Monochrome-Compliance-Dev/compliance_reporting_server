name: Sync main into long-lived branches

on:
  schedule:
    # Every Monday 08:00 AEST (adjust as you like)
    - cron: "0 22 * * 0" # 22:00 UTC Sunday ~= Monday 08:00 AEST
  workflow_dispatch:

permissions:
  contents: write # push commits
  pull-requests: write # open PRs

jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ["v2/core", "compliance_framework", "sit"] # <<< your branches
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches
        run: git fetch --all --prune

      - name: Attempt fast-forward/merge of main into ${{ matrix.branch }}
        id: merge
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${{ matrix.branch }}"
          git checkout "$TARGET"
          # Always update local refs
          git reset --hard "origin/$TARGET"
          git merge --no-ff --no-edit "origin/main" || echo "MERGE_CONFLICT" > /tmp/merge_status

          if [ ! -f /tmp/merge_status ]; then
            # No conflicts: push the merge commit
            git push origin HEAD:"$TARGET"
            echo "result=merged" >> "$GITHUB_OUTPUT"
          else
            # Conflicts: abort merge and fall back to PR
            git merge --abort || true
            echo "result=conflicted" >> "$GITHUB_OUTPUT"
          fi

      - name: Open issue when conflicts block auto-merge
        if: steps.merge.outputs.result == 'conflicted'
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          BASE="${{ matrix.branch }}"
          TITLE="Sync blocked: main â†’ ${BASE}"
          BODY=$'Automated sync.\n\nMerging **main** into **'"${BASE}"'** hit conflicts. Please resolve manually.'
          # Avoid duplicate issues with the same title
          if gh issue list --state open --search "in:title ${TITLE}" --json number --jq 'length' | grep -q '^0$'; then
            gh issue create --title "$TITLE" --body "$BODY" --label "sync"
          else
            echo "An open issue already exists; skipping."
          fi
